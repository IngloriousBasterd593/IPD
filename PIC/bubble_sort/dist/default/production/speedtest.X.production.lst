

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Jan 31 08:37:57 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F873
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	clrtext,global,class=CODE,space=0,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    13                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F873 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     008C                     PIE1            equ	140	;# 
    97     008D                     PIE2            equ	141	;# 
    98     008E                     PCON            equ	142	;# 
    99     0091                     SSPCON2         equ	145	;# 
   100     0092                     PR2             equ	146	;# 
   101     0093                     SSPADD          equ	147	;# 
   102     0094                     SSPSTAT         equ	148	;# 
   103     0098                     TXSTA           equ	152	;# 
   104     0099                     SPBRG           equ	153	;# 
   105     009E                     ADRESL          equ	158	;# 
   106     009F                     ADCON1          equ	159	;# 
   107     010C                     EEDATA          equ	268	;# 
   108     010D                     EEADR           equ	269	;# 
   109     010E                     EEDATH          equ	270	;# 
   110     010F                     EEADRH          equ	271	;# 
   111     018C                     EECON1          equ	396	;# 
   112     018D                     EECON2          equ	397	;# 
   113     0000                     INDF            equ	0	;# 
   114     0001                     TMR0            equ	1	;# 
   115     0002                     PCL             equ	2	;# 
   116     0003                     STATUS          equ	3	;# 
   117     0004                     FSR             equ	4	;# 
   118     0005                     PORTA           equ	5	;# 
   119     0006                     PORTB           equ	6	;# 
   120     0007                     PORTC           equ	7	;# 
   121     000A                     PCLATH          equ	10	;# 
   122     000B                     INTCON          equ	11	;# 
   123     000C                     PIR1            equ	12	;# 
   124     000D                     PIR2            equ	13	;# 
   125     000E                     TMR1            equ	14	;# 
   126     000E                     TMR1L           equ	14	;# 
   127     000F                     TMR1H           equ	15	;# 
   128     0010                     T1CON           equ	16	;# 
   129     0011                     TMR2            equ	17	;# 
   130     0012                     T2CON           equ	18	;# 
   131     0013                     SSPBUF          equ	19	;# 
   132     0014                     SSPCON          equ	20	;# 
   133     0015                     CCPR1           equ	21	;# 
   134     0015                     CCPR1L          equ	21	;# 
   135     0016                     CCPR1H          equ	22	;# 
   136     0017                     CCP1CON         equ	23	;# 
   137     0018                     RCSTA           equ	24	;# 
   138     0019                     TXREG           equ	25	;# 
   139     001A                     RCREG           equ	26	;# 
   140     001B                     CCPR2           equ	27	;# 
   141     001B                     CCPR2L          equ	27	;# 
   142     001C                     CCPR2H          equ	28	;# 
   143     001D                     CCP2CON         equ	29	;# 
   144     001E                     ADRESH          equ	30	;# 
   145     001F                     ADCON0          equ	31	;# 
   146     0081                     OPTION_REG      equ	129	;# 
   147     0085                     TRISA           equ	133	;# 
   148     0086                     TRISB           equ	134	;# 
   149     0087                     TRISC           equ	135	;# 
   150     008C                     PIE1            equ	140	;# 
   151     008D                     PIE2            equ	141	;# 
   152     008E                     PCON            equ	142	;# 
   153     0091                     SSPCON2         equ	145	;# 
   154     0092                     PR2             equ	146	;# 
   155     0093                     SSPADD          equ	147	;# 
   156     0094                     SSPSTAT         equ	148	;# 
   157     0098                     TXSTA           equ	152	;# 
   158     0099                     SPBRG           equ	153	;# 
   159     009E                     ADRESL          equ	158	;# 
   160     009F                     ADCON1          equ	159	;# 
   161     010C                     EEDATA          equ	268	;# 
   162     010D                     EEADR           equ	269	;# 
   163     010E                     EEDATH          equ	270	;# 
   164     010F                     EEADRH          equ	271	;# 
   165     018C                     EECON1          equ	396	;# 
   166     018D                     EECON2          equ	397	;# 
   167                           
   168                           	psect	idataBANK0
   169     06C9                     __pidataBANK0:
   170                           
   171                           ;initializer for _arr
   172     06C9  3494               	retlw	148
   173     06CA  3400               	retlw	0
   174     06CB  3443               	retlw	67
   175     06CC  3400               	retlw	0
   176     06CD  34FD               	retlw	253
   177     06CE  3400               	retlw	0
   178     06CF  340B               	retlw	11
   179     06D0  3400               	retlw	0
   180     06D1  3424               	retlw	36
   181     06D2  3400               	retlw	0
   182     06D3  34F5               	retlw	245
   183     06D4  3400               	retlw	0
   184     06D5  3400               	retlw	0
   185     06D6  3400               	retlw	0
   186     06D7  34FF               	retlw	255
   187     06D8  3400               	retlw	0
   188     06D9  347F               	retlw	127
   189     06DA  3400               	retlw	0
   190     06DB  3440               	retlw	64
   191     06DC  3400               	retlw	0
   192     06DD  3459               	retlw	89
   193     06DE  3400               	retlw	0
   194     06DF  3432               	retlw	50
   195     06E0  3400               	retlw	0
   196     06E1  340F               	retlw	15
   197     06E2  3400               	retlw	0
   198     06E3  3463               	retlw	99
   199     06E4  3400               	retlw	0
   200     06E5  34EA               	retlw	234
   201     06E6  3400               	retlw	0
   202     06E7  3480               	retlw	128
   203     06E8  3400               	retlw	0
   204     06E9  3401               	retlw	1
   205     06EA  3400               	retlw	0
   206     06EB  34C8               	retlw	200
   207     06EC  3400               	retlw	0
   208     06ED  3421               	retlw	33
   209     06EE  3400               	retlw	0
   210     06EF  345A               	retlw	90
   211     06F0  3400               	retlw	0
   212     06F1  3437               	retlw	55
   213     06F2  3400               	retlw	0
   214     06F3  344D               	retlw	77
   215     06F4  3400               	retlw	0
   216     06F5  347B               	retlw	123
   217     06F6  3400               	retlw	0
   218     06F7  34DE               	retlw	222
   219     06F8  3400               	retlw	0
   220     06F9  34BB               	retlw	187
   221     06FA  3400               	retlw	0
   222     0005                     _PORTA          set	5
   223     0085                     _TRISA          set	133
   224                           
   225                           	psect	cinit
   226     07EB                     start_initialization:	
   227                           ; #config settings
   228                           
   229     07EB                     __initialization:
   230                           
   231                           ; Initialize objects allocated to BANK0
   232     07EB  1383               	bcf	3,7	;select IRP bank0
   233     07EC  3052               	movlw	low (__pdataBANK0+50)
   234     07ED  00FD               	movwf	btemp+-1
   235     07EE  3006               	movlw	high __pidataBANK0
   236     07EF  00FE               	movwf	btemp
   237     07F0  30C9               	movlw	low __pidataBANK0
   238     07F1  00FF               	movwf	btemp+1
   239     07F2  3020               	movlw	low __pdataBANK0
   240     07F3  0084               	movwf	4
   241     07F4  118A  26A9  118A   	fcall	init_ram0
   242                           
   243                           ; Clear objects allocated to BANK0
   244     07F7  3052               	movlw	low __pbssBANK0
   245     07F8  0084               	movwf	4
   246     07F9  3060               	movlw	low (__pbssBANK0+14)
   247     07FA  118A  269D  118A   	fcall	clear_ram0
   248     07FD                     end_of_initialization:	
   249                           ;End of C runtime variable initialization code
   250                           
   251     07FD                     __end_of__initialization:
   252     07FD  0183               	clrf	3
   253     07FE  118A  2EB6         	ljmp	_main	;jump to C main() function
   254                           
   255                           	psect	bssBANK0
   256     0052                     __pbssBANK0:
   257     0052                     _j:
   258     0052                     	ds	4
   259     0056                     _i:
   260     0056                     	ds	4
   261     005A                     _pass:
   262     005A                     	ds	4
   263     005E                     _temp:
   264     005E                     	ds	2
   265                           
   266                           	psect	dataBANK0
   267     0020                     __pdataBANK0:
   268     0020                     _arr:
   269     0020                     	ds	50
   270                           
   271                           	psect	inittext
   272     06A5                     init_fetch0:	
   273                           ;	Called with low address in FSR and high address in W
   274                           
   275     06A5  087E               	movf	btemp,w
   276     06A6  008A               	movwf	10
   277     06A7  087F               	movf	btemp+1,w
   278     06A8  0082               	movwf	2
   279     06A9                     init_ram0:	
   280                           ;Called with:
   281                           ;	high address of idata address in btemp 
   282                           ;	low address of idata address in btemp+1 
   283                           ;	low address of data in FSR
   284                           ;	high address + 1 of data in btemp-1
   285                           
   286     06A9  118A  26A5  118A   	fcall	init_fetch0
   287     06AC  0080               	movwf	0
   288     06AD  0A84               	incf	4,f
   289     06AE  0804               	movf	4,w
   290     06AF  067D               	xorwf	btemp+-1,w
   291     06B0  1903               	btfsc	3,2
   292     06B1  3400               	retlw	0
   293     06B2  0AFF               	incf	btemp+1,f
   294     06B3  1903               	btfsc	3,2
   295     06B4  0AFE               	incf	btemp,f
   296     06B5  2EA9               	goto	init_ram0
   297                           
   298                           	psect	clrtext
   299     069D                     clear_ram0:	
   300                           ;	Called with FSR containing the base address, and
   301                           ;	W with the last address+1
   302                           
   303     069D  0064               	clrwdt	;clear the watchdog before getting into this loop
   304     069E                     clrloop0:
   305     069E  0180               	clrf	0	;clear RAM location pointed to by FSR
   306     069F  0A84               	incf	4,f	;increment pointer
   307     06A0  0604               	xorwf	4,w	;XOR with final address
   308     06A1  1903               	btfsc	3,2	;have we reached the end yet?
   309     06A2  3400               	retlw	0	;all done for this memory range, return
   310     06A3  0604               	xorwf	4,w	;XOR again to restore value
   311     06A4  2E9E               	goto	clrloop0	;do the next byte
   312                           
   313                           	psect	cstackCOMMON
   314     0000                     __pcstackCOMMON:
   315     0000                     ??_main:
   316                           
   317                           	psect	cstackBANK0
   318     0060                     __pcstackBANK0:	
   319                           ; 1 bytes @ 0x0
   320                           
   321     0060                     ?_bubble_sort:
   322     0060                     ?_main:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0060                     ??_bubble_sort:	
   326                           ; 1 bytes @ 0x0
   327                           
   328                           
   329                           ; 1 bytes @ 0x0
   330     0060                     	ds	7
   331                           
   332                           	psect	maintext
   333     06B6                     __pmaintext:	
   334 ;;
   335 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   336 ;;
   337 ;; *************** function _main *****************
   338 ;; Defined at:
   339 ;;		line 23 in file "main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  1    wreg      void 
   346 ;; Registers used:
   347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : B00/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0   BANK1
   353 ;;      Params:         0       0       0
   354 ;;      Locals:         0       0       0
   355 ;;      Temps:          0       0       0
   356 ;;      Totals:         0       0       0
   357 ;;Total ram usage:        0 bytes
   358 ;; Hardware stack levels required when called: 1
   359 ;; This function calls:
   360 ;;		_bubble_sort
   361 ;; This function is called by:
   362 ;;		Startup code after reset
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366     06B6                     _main:	
   367                           ;psect for function _main
   368                           
   369     06B6                     l647:	
   370                           ;incstack = 0
   371                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   372                           
   373                           
   374                           ;main.c: 25:     TRISA = 0x00;
   375     06B6  1683               	bsf	3,5	;RP0=1, select bank1
   376     06B7  1303               	bcf	3,6	;RP1=0, select bank1
   377     06B8  0185               	clrf	5	;volatile
   378     06B9                     l649:
   379                           
   380                           ;main.c: 27:     {;main.c: 28:          PORTA = 0x01;
   381     06B9  3001               	movlw	1
   382     06BA  1283               	bcf	3,5	;RP0=0, select bank0
   383     06BB  1303               	bcf	3,6	;RP1=0, select bank0
   384     06BC  0085               	movwf	5	;volatile
   385     06BD                     l651:
   386                           
   387                           ;main.c: 29:          bubble_sort();
   388     06BD  118A  26FB  118A   	fcall	_bubble_sort
   389     06C0                     l653:
   390                           
   391                           ;main.c: 30:          PORTA = 0x00;
   392     06C0  1283               	bcf	3,5	;RP0=0, select bank0
   393     06C1  1303               	bcf	3,6	;RP1=0, select bank0
   394     06C2  0185               	clrf	5	;volatile
   395                           
   396                           ;main.c: 31:          bubble_sort();
   397     06C3  118A  26FB  118A   	fcall	_bubble_sort
   398     06C6  2EB9               	goto	l649
   399     06C7  118A  2800         	ljmp	start
   400     06C9                     __end_of_main:
   401                           
   402                           	psect	text1
   403     06FB                     __ptext1:	
   404 ;; *************** function _bubble_sort *****************
   405 ;; Defined at:
   406 ;;		line 35 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;		None
   409 ;; Auto vars:     Size  Location     Type
   410 ;;		None
   411 ;; Return value:  Size  Location     Type
   412 ;;                  1    wreg      void 
   413 ;; Registers used:
   414 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   415 ;; Tracked objects:
   416 ;;		On entry : 0/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMMON   BANK0   BANK1
   420 ;;      Params:         0       0       0
   421 ;;      Locals:         0       0       0
   422 ;;      Temps:          0       7       0
   423 ;;      Totals:         0       7       0
   424 ;;Total ram usage:        7 bytes
   425 ;; Hardware stack levels used: 1
   426 ;; This function calls:
   427 ;;		Nothing
   428 ;; This function is called by:
   429 ;;		_main
   430 ;; This function uses a non-reentrant model
   431 ;;
   432                           
   433     06FB                     _bubble_sort:	
   434                           ;psect for function _bubble_sort
   435                           
   436     06FB                     l617:	
   437                           ;incstack = 0
   438                           ; Regs used in _bubble_sort: [wreg-fsr0h+status,2+status,0]
   439                           
   440                           
   441                           ;main.c: 36:  for(pass = 0; pass < 25; pass++){
   442     06FB  3000               	movlw	0
   443     06FC  1283               	bcf	3,5	;RP0=0, select bank0
   444     06FD  1303               	bcf	3,6	;RP1=0, select bank0
   445     06FE  00DD               	movwf	_pass+3	;volatile
   446     06FF  3000               	movlw	0
   447     0700  00DC               	movwf	_pass+2	;volatile
   448     0701  3000               	movlw	0
   449     0702  00DB               	movwf	_pass+1	;volatile
   450     0703  3000               	movlw	0
   451     0704  00DA               	movwf	_pass	;volatile
   452     0705                     l619:
   453     0705  085D               	movf	_pass+3,w	;volatile
   454     0706  1D03               	btfss	3,2
   455     0707  2F16               	goto	u60
   456     0708  085C               	movf	_pass+2,w	;volatile
   457     0709  1D03               	btfss	3,2
   458     070A  2F16               	goto	u60
   459     070B  085B               	movf	_pass+1,w	;volatile
   460     070C  1D03               	btfss	3,2
   461     070D  2F16               	goto	u60
   462     070E  3019               	movlw	25
   463     070F  025A               	subwf	_pass,w	;volatile
   464     0710  1D03               	skipz
   465     0711  2F12               	goto	u63
   466     0712                     u63:
   467     0712  1C03               	btfss	3,0
   468     0713  2F15               	goto	u61
   469     0714  2F16               	goto	u60
   470     0715                     u61:
   471     0715  2F17               	goto	l623
   472     0716                     u60:
   473     0716  2FEA               	goto	l35
   474     0717                     l623:
   475                           
   476                           ;main.c: 37:   for(i = 0; i < 25 - 1; i++){
   477     0717  3000               	movlw	0
   478     0718  1283               	bcf	3,5	;RP0=0, select bank0
   479     0719  1303               	bcf	3,6	;RP1=0, select bank0
   480     071A  00D9               	movwf	_i+3	;volatile
   481     071B  3000               	movlw	0
   482     071C  00D8               	movwf	_i+2	;volatile
   483     071D  3000               	movlw	0
   484     071E  00D7               	movwf	_i+1	;volatile
   485     071F  3000               	movlw	0
   486     0720  00D6               	movwf	_i	;volatile
   487     0721                     l625:
   488     0721  0859               	movf	_i+3,w	;volatile
   489     0722  1D03               	btfss	3,2
   490     0723  2F32               	goto	u70
   491     0724  0858               	movf	_i+2,w	;volatile
   492     0725  1D03               	btfss	3,2
   493     0726  2F32               	goto	u70
   494     0727  0857               	movf	_i+1,w	;volatile
   495     0728  1D03               	btfss	3,2
   496     0729  2F32               	goto	u70
   497     072A  3018               	movlw	24
   498     072B  0256               	subwf	_i,w	;volatile
   499     072C  1D03               	skipz
   500     072D  2F2E               	goto	u73
   501     072E                     u73:
   502     072E  1C03               	btfss	3,0
   503     072F  2F31               	goto	u71
   504     0730  2F32               	goto	u70
   505     0731                     u71:
   506     0731  2F33               	goto	l629
   507     0732                     u70:
   508     0732  2FD9               	goto	l643
   509     0733                     l629:
   510                           
   511                           ;main.c: 38:    for(j = 0; j < 25 - i - 1; j++){
   512     0733  3000               	movlw	0
   513     0734  1283               	bcf	3,5	;RP0=0, select bank0
   514     0735  1303               	bcf	3,6	;RP1=0, select bank0
   515     0736  00D5               	movwf	_j+3	;volatile
   516     0737  3000               	movlw	0
   517     0738  00D4               	movwf	_j+2	;volatile
   518     0739  3000               	movlw	0
   519     073A  00D3               	movwf	_j+1	;volatile
   520     073B  3000               	movlw	0
   521     073C  00D2               	movwf	_j	;volatile
   522     073D  2F9C               	goto	l637
   523     073E                     l631:
   524                           
   525                           ;main.c: 39:     if(arr[j] > arr[j+1]){
   526     073E  0852               	movf	_j,w	;volatile
   527     073F  00E0               	movwf	??_bubble_sort
   528     0740  0760               	addwf	??_bubble_sort,w
   529     0741  3E20               	addlw	(low (_arr| 0))& (0+255)
   530     0742  0084               	movwf	4
   531     0743  1383               	bcf	3,7	;select IRP bank0
   532     0744  0800               	movf	0,w
   533     0745  00E1               	movwf	??_bubble_sort+1
   534     0746  0A84               	incf	4,f
   535     0747  0800               	movf	0,w
   536     0748  00E2               	movwf	??_bubble_sort+2
   537     0749  0852               	movf	_j,w	;volatile
   538     074A  00E3               	movwf	??_bubble_sort+3
   539     074B  0763               	addwf	??_bubble_sort+3,w
   540     074C  3E22               	addlw	(low ((_arr| 0+2)))& (0+255)
   541     074D  0084               	movwf	4
   542     074E  0800               	movf	0,w
   543     074F  00E4               	movwf	??_bubble_sort+4
   544     0750  0A84               	incf	4,f
   545     0751  0800               	movf	0,w
   546     0752  00E5               	movwf	??_bubble_sort+5
   547     0753  0865               	movf	??_bubble_sort+5,w
   548     0754  3A80               	xorlw	128
   549     0755  00E6               	movwf	??_bubble_sort+6
   550     0756  0862               	movf	??_bubble_sort+2,w
   551     0757  3A80               	xorlw	128
   552     0758  0266               	subwf	??_bubble_sort+6,w
   553     0759  1D03               	skipz
   554     075A  2F5D               	goto	u85
   555     075B  0861               	movf	??_bubble_sort+1,w
   556     075C  0264               	subwf	??_bubble_sort+4,w
   557     075D                     u85:
   558     075D  1803               	skipnc
   559     075E  2F60               	goto	u81
   560     075F  2F61               	goto	u80
   561     0760                     u81:
   562     0760  2F8C               	goto	l635
   563     0761                     u80:
   564     0761                     l633:
   565                           
   566                           ;main.c: 40:      temp = arr[j];
   567     0761  1283               	bcf	3,5	;RP0=0, select bank0
   568     0762  1303               	bcf	3,6	;RP1=0, select bank0
   569     0763  0852               	movf	_j,w	;volatile
   570     0764  00E0               	movwf	??_bubble_sort
   571     0765  0760               	addwf	??_bubble_sort,w
   572     0766  3E20               	addlw	(low (_arr| 0))& (0+255)
   573     0767  0084               	movwf	4
   574     0768  1383               	bcf	3,7	;select IRP bank0
   575     0769  0800               	movf	0,w
   576     076A  00DE               	movwf	_temp	;volatile
   577     076B  0A84               	incf	4,f
   578     076C  0800               	movf	0,w
   579     076D  00DF               	movwf	_temp+1	;volatile
   580                           
   581                           ;main.c: 41:      arr[j] = arr[j+1];
   582     076E  0852               	movf	_j,w	;volatile
   583     076F  00E0               	movwf	??_bubble_sort
   584     0770  0760               	addwf	??_bubble_sort,w
   585     0771  3E22               	addlw	(low ((_arr| 0+2)))& (0+255)
   586     0772  0084               	movwf	4
   587     0773  0800               	movf	0,w
   588     0774  00E1               	movwf	??_bubble_sort+1
   589     0775  0A84               	incf	4,f
   590     0776  0800               	movf	0,w
   591     0777  00E2               	movwf	??_bubble_sort+2
   592     0778  0852               	movf	_j,w	;volatile
   593     0779  00E3               	movwf	??_bubble_sort+3
   594     077A  0763               	addwf	??_bubble_sort+3,w
   595     077B  3E20               	addlw	(low (_arr| 0))& (0+255)
   596     077C  0084               	movwf	4
   597     077D  0861               	movf	??_bubble_sort+1,w
   598     077E  0080               	movwf	0
   599     077F  0A84               	incf	4,f
   600     0780  0862               	movf	??_bubble_sort+2,w
   601     0781  0080               	movwf	0
   602                           
   603                           ;main.c: 42:      arr[j + 1] = temp;
   604     0782  0852               	movf	_j,w	;volatile
   605     0783  00E0               	movwf	??_bubble_sort
   606     0784  0760               	addwf	??_bubble_sort,w
   607     0785  3E22               	addlw	(low ((_arr| 0+2)))& (0+255)
   608     0786  0084               	movwf	4
   609     0787  085E               	movf	_temp,w	;volatile
   610     0788  0080               	movwf	0
   611     0789  0A84               	incf	4,f
   612     078A  085F               	movf	_temp+1,w	;volatile
   613     078B  0080               	movwf	0
   614     078C                     l635:
   615                           
   616                           ;main.c: 44:    }
   617     078C  3001               	movlw	1
   618     078D  1283               	bcf	3,5	;RP0=0, select bank0
   619     078E  1303               	bcf	3,6	;RP1=0, select bank0
   620     078F  07D2               	addwf	_j,f	;volatile
   621     0790  3000               	movlw	0
   622     0791  1803               	skipnc
   623     0792  3001               	movlw	1
   624     0793  07D3               	addwf	_j+1,f	;volatile
   625     0794  3000               	movlw	0
   626     0795  1803               	skipnc
   627     0796  3001               	movlw	1
   628     0797  07D4               	addwf	_j+2,f	;volatile
   629     0798  3000               	movlw	0
   630     0799  1803               	skipnc
   631     079A  3001               	movlw	1
   632     079B  07D5               	addwf	_j+3,f	;volatile
   633     079C                     l637:
   634     079C  3018               	movlw	24
   635     079D  00E0               	movwf	??_bubble_sort
   636     079E  3000               	movlw	0
   637     079F  00E1               	movwf	??_bubble_sort+1
   638     07A0  3000               	movlw	0
   639     07A1  00E2               	movwf	??_bubble_sort+2
   640     07A2  3000               	movlw	0
   641     07A3  00E3               	movwf	??_bubble_sort+3
   642     07A4  0856               	movf	_i,w	;volatile
   643     07A5  02E0               	subwf	??_bubble_sort,f
   644     07A6  0857               	movf	_i+1,w	;volatile
   645     07A7  1C03               	skipc
   646     07A8  0F57               	incfsz	_i+1,w	;volatile
   647     07A9  2FAB               	goto	u91
   648     07AA  2FAC               	goto	u92
   649     07AB                     u91:
   650     07AB  02E1               	subwf	??_bubble_sort+1,f
   651     07AC                     u92:
   652     07AC  0858               	movf	_i+2,w	;volatile
   653     07AD  1C03               	skipc
   654     07AE  0F58               	incfsz	_i+2,w	;volatile
   655     07AF  2FB1               	goto	u93
   656     07B0  2FB2               	goto	u94
   657     07B1                     u93:
   658     07B1  02E2               	subwf	??_bubble_sort+2,f
   659     07B2                     u94:
   660     07B2  0859               	movf	_i+3,w	;volatile
   661     07B3  1C03               	skipc
   662     07B4  0F59               	incfsz	_i+3,w	;volatile
   663     07B5  2FB7               	goto	u95
   664     07B6  2FB8               	goto	u96
   665     07B7                     u95:
   666     07B7  02E3               	subwf	??_bubble_sort+3,f
   667     07B8                     u96:
   668     07B8  0863               	movf	??_bubble_sort+3,w
   669     07B9  0255               	subwf	_j+3,w	;volatile
   670     07BA  1D03               	skipz
   671     07BB  2FC6               	goto	u105
   672     07BC  0862               	movf	??_bubble_sort+2,w
   673     07BD  0254               	subwf	_j+2,w	;volatile
   674     07BE  1D03               	skipz
   675     07BF  2FC6               	goto	u105
   676     07C0  0861               	movf	??_bubble_sort+1,w
   677     07C1  0253               	subwf	_j+1,w	;volatile
   678     07C2  1D03               	skipz
   679     07C3  2FC6               	goto	u105
   680     07C4  0860               	movf	??_bubble_sort,w
   681     07C5  0252               	subwf	_j,w	;volatile
   682     07C6                     u105:
   683     07C6  1C03               	skipc
   684     07C7  2FC9               	goto	u101
   685     07C8  2FCA               	goto	u100
   686     07C9                     u101:
   687     07C9  2F3E               	goto	l631
   688     07CA                     u100:
   689     07CA                     l639:
   690                           
   691                           ;main.c: 45:   }
   692     07CA  3001               	movlw	1
   693     07CB  07D6               	addwf	_i,f	;volatile
   694     07CC  3000               	movlw	0
   695     07CD  1803               	skipnc
   696     07CE  3001               	movlw	1
   697     07CF  07D7               	addwf	_i+1,f	;volatile
   698     07D0  3000               	movlw	0
   699     07D1  1803               	skipnc
   700     07D2  3001               	movlw	1
   701     07D3  07D8               	addwf	_i+2,f	;volatile
   702     07D4  3000               	movlw	0
   703     07D5  1803               	skipnc
   704     07D6  3001               	movlw	1
   705     07D7  07D9               	addwf	_i+3,f	;volatile
   706     07D8  2F21               	goto	l625
   707     07D9                     l643:
   708                           
   709                           ;main.c: 46:  }
   710     07D9  3001               	movlw	1
   711     07DA  1283               	bcf	3,5	;RP0=0, select bank0
   712     07DB  1303               	bcf	3,6	;RP1=0, select bank0
   713     07DC  07DA               	addwf	_pass,f	;volatile
   714     07DD  3000               	movlw	0
   715     07DE  1803               	skipnc
   716     07DF  3001               	movlw	1
   717     07E0  07DB               	addwf	_pass+1,f	;volatile
   718     07E1  3000               	movlw	0
   719     07E2  1803               	skipnc
   720     07E3  3001               	movlw	1
   721     07E4  07DC               	addwf	_pass+2,f	;volatile
   722     07E5  3000               	movlw	0
   723     07E6  1803               	skipnc
   724     07E7  3001               	movlw	1
   725     07E8  07DD               	addwf	_pass+3,f	;volatile
   726     07E9  2F05               	goto	l619
   727     07EA                     l35:
   728     07EA  0008               	return
   729     07EB                     __end_of_bubble_sort:
   730     0001                     ___latbits      equ	1
   731     007E                     btemp           set	126	;btemp
   732     007E                     wtemp0          set	126
   733                           
   734                           	psect	config
   735                           
   736                           ;Config register CONFIG @ 0x2007
   737                           ;	Oscillator Selection bits
   738                           ;	FOSC = HS, HS oscillator
   739                           ;	Watchdog Timer Enable bit
   740                           ;	WDTE = OFF, WDT disabled
   741                           ;	Power-up Timer Enable bit
   742                           ;	PWRTE = OFF, PWRT disabled
   743                           ;	FLASH Program Memory Code Protection bits
   744                           ;	CP = OFF, Code protection off
   745                           ;	Brown-out Reset Enable bit
   746                           ;	BOREN = ON, BOR enabled
   747                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   748                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   749                           ;	Data EE Memory Code Protection
   750                           ;	CPD = OFF, Code Protection off
   751                           ;	FLASH Program Memory Write Enable
   752                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
   753                           ;	In-Circuit Debugger Mode bit
   754                           ;	DEBUG = 0x1, unprogrammed default
   755     2007                     	org	8199
   756     2007  3D7A               	dw	15738

Data Sizes:
    Strings     0
    Constant    0
    Data        50
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94      7      71
    BANK1            94      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_bubble_sort

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _bubble_sort
 ---------------------------------------------------------------------------------
 (1) _bubble_sort                                          7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _bubble_sort

Address spaces:
Name               Size   Autos  Total    Usage
BANK1               94      0       0      0.0%
BITBANK1            94      0       0      0.0%
BANK0               94      7      71     75.5%
BITBANK0            94      0       0      0.0%
COMMON               0      0       0      0.0%
BITCOMMON            0      0       0      0.0%
DATA                 0      0      71      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Jan 31 08:37:57 2025

                      _i 0056                        _j 0052                        pc 0002  
                     l35 07EA                       u60 0716                       u61 0715  
                     u70 0732                       u71 0731                       u63 0712  
                     u80 0761                       u81 0760                       u73 072E  
                     u91 07AB                       u92 07AC                       u93 07B1  
                     u85 075D                       u94 07B2                       u95 07B7  
                     u96 07B8                       fsr 0004                      l631 073E  
                    l623 0717                      l633 0761                      l625 0721  
                    l617 06FB                      l635 078C                      l643 07D9  
                    l619 0705                      l651 06BD                      l637 079C  
                    l629 0733                      l653 06C0                      l639 07CA  
                    l647 06B6                      l649 06B9                      u100 07CA  
                    u101 07C9                      u105 07C6                      _arr 0020  
                    fsr0 0004                      indf 0000                     _main 06B6  
                   _pass 005A                     _temp 005E                     btemp 007E  
                   start 0000                    ?_main 0060                    _PORTA 0005  
                  _TRISA 0085                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07EB             __end_of_main 06C9  
                 ??_main 0000  __end_of__initialization 07FD           __pcstackCOMMON 0000  
           __pidataBANK0 06C9               __pbssBANK0 0052               __pmaintext 06B6  
                __ptext1 06FB                  clrloop0 069E     end_of_initialization 07FD  
          ??_bubble_sort 0060      start_initialization 07EB      __end_of_bubble_sort 07EB  
             init_fetch0 06A5              __pdataBANK0 0020                ___latbits 0001  
          __pcstackBANK0 0060              _bubble_sort 06FB                clear_ram0 069D  
               init_ram0 06A9             ?_bubble_sort 0060  
