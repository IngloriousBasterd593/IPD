

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Wed Feb 19 19:59:46 2025

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F873
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2,group=1
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 12/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F873 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0004                     fsr             equ	4
    52     0004                     fsr0            equ	4
    53     0000                     indf            equ	0
    54     0000                     indf0           equ	0
    55     0002                     pc              equ	2
    56     0002                     pcl             equ	2
    57     000A                     pclath          equ	10
    58     0003                     status          equ	3
    59     0000                     INDF            equ	0	;# 
    60     0001                     TMR0            equ	1	;# 
    61     0002                     PCL             equ	2	;# 
    62     0003                     STATUS          equ	3	;# 
    63     0004                     FSR             equ	4	;# 
    64     0005                     PORTA           equ	5	;# 
    65     0006                     PORTB           equ	6	;# 
    66     0007                     PORTC           equ	7	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     008C                     PIE1            equ	140	;# 
    97     008D                     PIE2            equ	141	;# 
    98     008E                     PCON            equ	142	;# 
    99     0091                     SSPCON2         equ	145	;# 
   100     0092                     PR2             equ	146	;# 
   101     0093                     SSPADD          equ	147	;# 
   102     0094                     SSPSTAT         equ	148	;# 
   103     0098                     TXSTA           equ	152	;# 
   104     0099                     SPBRG           equ	153	;# 
   105     009E                     ADRESL          equ	158	;# 
   106     009F                     ADCON1          equ	159	;# 
   107     010C                     EEDATA          equ	268	;# 
   108     010D                     EEADR           equ	269	;# 
   109     010E                     EEDATH          equ	270	;# 
   110     010F                     EEADRH          equ	271	;# 
   111     018C                     EECON1          equ	396	;# 
   112     018D                     EECON2          equ	397	;# 
   113     0000                     INDF            equ	0	;# 
   114     0001                     TMR0            equ	1	;# 
   115     0002                     PCL             equ	2	;# 
   116     0003                     STATUS          equ	3	;# 
   117     0004                     FSR             equ	4	;# 
   118     0005                     PORTA           equ	5	;# 
   119     0006                     PORTB           equ	6	;# 
   120     0007                     PORTC           equ	7	;# 
   121     000A                     PCLATH          equ	10	;# 
   122     000B                     INTCON          equ	11	;# 
   123     000C                     PIR1            equ	12	;# 
   124     000D                     PIR2            equ	13	;# 
   125     000E                     TMR1            equ	14	;# 
   126     000E                     TMR1L           equ	14	;# 
   127     000F                     TMR1H           equ	15	;# 
   128     0010                     T1CON           equ	16	;# 
   129     0011                     TMR2            equ	17	;# 
   130     0012                     T2CON           equ	18	;# 
   131     0013                     SSPBUF          equ	19	;# 
   132     0014                     SSPCON          equ	20	;# 
   133     0015                     CCPR1           equ	21	;# 
   134     0015                     CCPR1L          equ	21	;# 
   135     0016                     CCPR1H          equ	22	;# 
   136     0017                     CCP1CON         equ	23	;# 
   137     0018                     RCSTA           equ	24	;# 
   138     0019                     TXREG           equ	25	;# 
   139     001A                     RCREG           equ	26	;# 
   140     001B                     CCPR2           equ	27	;# 
   141     001B                     CCPR2L          equ	27	;# 
   142     001C                     CCPR2H          equ	28	;# 
   143     001D                     CCP2CON         equ	29	;# 
   144     001E                     ADRESH          equ	30	;# 
   145     001F                     ADCON0          equ	31	;# 
   146     0081                     OPTION_REG      equ	129	;# 
   147     0085                     TRISA           equ	133	;# 
   148     0086                     TRISB           equ	134	;# 
   149     0087                     TRISC           equ	135	;# 
   150     008C                     PIE1            equ	140	;# 
   151     008D                     PIE2            equ	141	;# 
   152     008E                     PCON            equ	142	;# 
   153     0091                     SSPCON2         equ	145	;# 
   154     0092                     PR2             equ	146	;# 
   155     0093                     SSPADD          equ	147	;# 
   156     0094                     SSPSTAT         equ	148	;# 
   157     0098                     TXSTA           equ	152	;# 
   158     0099                     SPBRG           equ	153	;# 
   159     009E                     ADRESL          equ	158	;# 
   160     009F                     ADCON1          equ	159	;# 
   161     010C                     EEDATA          equ	268	;# 
   162     010D                     EEADR           equ	269	;# 
   163     010E                     EEDATH          equ	270	;# 
   164     010F                     EEADRH          equ	271	;# 
   165     018C                     EECON1          equ	396	;# 
   166     018D                     EECON2          equ	397	;# 
   167                           
   168                           	psect	idataBANK0
   169     0657                     __pidataBANK0:
   170                           
   171                           ;initializer for _d
   172     0657  3458               	retlw	88
   173     0658  3400               	retlw	0
   174     0659  340B               	retlw	11
   175     065A  3400               	retlw	0
   176     065B  3402               	retlw	2
   177     065C  3400               	retlw	0
   178     065D  34D4               	retlw	212
   179     065E  34FF               	retlw	255
   180     065F  3404               	retlw	4
   181     0660  3400               	retlw	0
   182     0661  3409               	retlw	9
   183     0662  3400               	retlw	0
   184     0663  34B0               	retlw	176
   185     0664  34FF               	retlw	255
   186     0665  3401               	retlw	1
   187     0666  3400               	retlw	0
   188     0667  3402               	retlw	2
   189     0668  3400               	retlw	0
   190     0669  340D               	retlw	13
   191     066A  3400               	retlw	0
   192     066B  3402               	retlw	2
   193     066C  3400               	retlw	0
   194     066D  34FF               	retlw	255
   195     066E  34FF               	retlw	255
   196     066F  3400               	retlw	0
   197     0670  3400               	retlw	0
   198     0671  3401               	retlw	1
   199     0672  3400               	retlw	0
   200     0673  3428               	retlw	40
   201     0674  3400               	retlw	0
   202     0675  3453               	retlw	83
   203     0676  3400               	retlw	0
   204     0677  34E0               	retlw	224
   205     0678  34FF               	retlw	255
   206     0679  347C               	retlw	124
   207     067A  3400               	retlw	0
   208     067B  3446               	retlw	70
   209     067C  3400               	retlw	0
   210     067D  3401               	retlw	1
   211     067E  3400               	retlw	0
   212     067F  3404               	retlw	4
   213     0680  3400               	retlw	0
   214     0681  340D               	retlw	13
   215     0682  3400               	retlw	0
   216     0683  34FE               	retlw	254
   217     0684  34FF               	retlw	255
   218     0685  3401               	retlw	1
   219     0686  3400               	retlw	0
   220     0687  345A               	retlw	90
   221     0688  3400               	retlw	0
   222     0005                     _PORTA          set	5
   223     0085                     _TRISA          set	133
   224                           
   225                           	psect	cinit
   226     07EB                     start_initialization:	
   227                           ; #config settings
   228                           
   229     07EB                     __initialization:
   230                           
   231                           ; Initialize objects allocated to BANK0
   232     07EB  1383               	bcf	3,7	;select IRP bank0
   233     07EC  3052               	movlw	low (__pdataBANK0+50)
   234     07ED  00FD               	movwf	btemp+-1
   235     07EE  3006               	movlw	high __pidataBANK0
   236     07EF  00FE               	movwf	btemp
   237     07F0  3057               	movlw	low __pidataBANK0
   238     07F1  00FF               	movwf	btemp+1
   239     07F2  3020               	movlw	low __pdataBANK0
   240     07F3  0084               	movwf	4
   241     07F4  118A  2622  118A   	fcall	init_ram0
   242                           
   243                           ; Clear objects allocated to BANK0
   244     07F7  01E7               	clrf	__pbssBANK0& (0+127)
   245     07F8  01E8               	clrf	(__pbssBANK0+1)& (0+127)
   246     07F9  01E9               	clrf	(__pbssBANK0+2)& (0+127)
   247     07FA  01EA               	clrf	(__pbssBANK0+3)& (0+127)
   248     07FB  01EB               	clrf	(__pbssBANK0+4)& (0+127)
   249     07FC  01EC               	clrf	(__pbssBANK0+5)& (0+127)
   250     07FD                     end_of_initialization:	
   251                           ;End of C runtime variable initialization code
   252                           
   253     07FD                     __end_of__initialization:
   254     07FD  0183               	clrf	3
   255     07FE  118A  2E2F         	ljmp	_main	;jump to C main() function
   256                           
   257                           	psect	bssBANK0
   258     0067                     __pbssBANK0:
   259     0067                     _j:
   260     0067                     	ds	2
   261     0069                     _i:
   262     0069                     	ds	2
   263     006B                     _k:
   264     006B                     	ds	2
   265                           
   266                           	psect	dataBANK0
   267     0020                     __pdataBANK0:
   268     0020                     _d:
   269     0020                     	ds	50
   270                           
   271                           	psect	inittext
   272     061E                     init_fetch0:	
   273                           ;	Called with low address in FSR and high address in W
   274                           
   275     061E  087E               	movf	btemp,w
   276     061F  008A               	movwf	10
   277     0620  087F               	movf	btemp+1,w
   278     0621  0082               	movwf	2
   279     0622                     init_ram0:	
   280                           ;Called with:
   281                           ;	high address of idata address in btemp 
   282                           ;	low address of idata address in btemp+1 
   283                           ;	low address of data in FSR
   284                           ;	high address + 1 of data in btemp-1
   285                           
   286     0622  118A  261E  118A   	fcall	init_fetch0
   287     0625  0080               	movwf	0
   288     0626  0A84               	incf	4,f
   289     0627  0804               	movf	4,w
   290     0628  067D               	xorwf	btemp+-1,w
   291     0629  1903               	btfsc	3,2
   292     062A  3400               	retlw	0
   293     062B  0AFF               	incf	btemp+1,f
   294     062C  1903               	btfsc	3,2
   295     062D  0AFE               	incf	btemp,f
   296     062E  2E22               	goto	init_ram0
   297                           
   298                           	psect	cstackCOMMON
   299     0000                     __pcstackCOMMON:
   300     0000                     ??_main:
   301     0000                     ??___bmul:	
   302                           ; 1 bytes @ 0x0
   303                           
   304                           
   305                           	psect	cstackBANK0
   306     0052                     __pcstackBANK0:	
   307                           ; 1 bytes @ 0x0
   308                           
   309     0052                     ?_graf:
   310     0052                     ?_main:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0052                     ?___bmul:	
   314                           ; 1 bytes @ 0x0
   315                           
   316     0052                     ___bmul@multiplicand:	
   317                           ; 1 bytes @ 0x0
   318                           
   319                           
   320                           ; 1 bytes @ 0x0
   321     0052                     	ds	1
   322     0053                     ___bmul@product:
   323                           
   324                           ; 1 bytes @ 0x1
   325     0053                     	ds	1
   326     0054                     ___bmul@multiplier:
   327                           
   328                           ; 1 bytes @ 0x2
   329     0054                     	ds	1
   330     0055                     ??_graf:
   331                           
   332                           ; 1 bytes @ 0x3
   333     0055                     	ds	18
   334                           
   335                           	psect	maintext
   336     062F                     __pmaintext:	
   337 ;;
   338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   339 ;;
   340 ;; *************** function _main *****************
   341 ;; Defined at:
   342 ;;		line 30 in file "main.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : B00/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1
   356 ;;      Params:         0       0       0
   357 ;;      Locals:         0       0       0
   358 ;;      Temps:          0       0       0
   359 ;;      Totals:         0       0       0
   360 ;;Total ram usage:        0 bytes
   361 ;; Hardware stack levels required when called: 2
   362 ;; This function calls:
   363 ;;		_graf
   364 ;; This function is called by:
   365 ;;		Startup code after reset
   366 ;; This function uses a non-reentrant model
   367 ;;
   368                           
   369     062F                     _main:	
   370                           ;psect for function _main
   371                           
   372     062F                     l680:	
   373                           ;incstack = 0
   374                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   375                           
   376                           
   377                           ;main.c: 32:     TRISA = 0x00;
   378     062F  1683               	bsf	3,5	;RP0=1, select bank1
   379     0630  1303               	bcf	3,6	;RP1=0, select bank1
   380     0631  0185               	clrf	5	;volatile
   381     0632                     l682:
   382                           
   383                           ;main.c: 34:     {;main.c: 35:          PORTA = 0x01;
   384     0632  3001               	movlw	1
   385     0633  1283               	bcf	3,5	;RP0=0, select bank0
   386     0634  1303               	bcf	3,6	;RP1=0, select bank0
   387     0635  0085               	movwf	5	;volatile
   388     0636                     l684:
   389                           
   390                           ;main.c: 36:          graf();
   391     0636  118A  2689  118A   	fcall	_graf
   392     0639                     l686:
   393                           
   394                           ;main.c: 37:          PORTA = 0x00;
   395     0639  1283               	bcf	3,5	;RP0=0, select bank0
   396     063A  1303               	bcf	3,6	;RP1=0, select bank0
   397     063B  0185               	clrf	5	;volatile
   398                           
   399                           ;main.c: 38:          graf();
   400     063C  118A  2689  118A   	fcall	_graf
   401     063F  2E32               	goto	l682
   402     0640  118A  2800         	ljmp	start
   403     0642                     __end_of_main:
   404                           
   405                           	psect	text1
   406     0689                     __ptext1:	
   407 ;; *************** function _graf *****************
   408 ;; Defined at:
   409 ;;		line 42 in file "main.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMMON   BANK0   BANK1
   423 ;;      Params:         0       0       0
   424 ;;      Locals:         0       0       0
   425 ;;      Temps:          0      18       0
   426 ;;      Totals:         0      18       0
   427 ;;Total ram usage:       18 bytes
   428 ;; Hardware stack levels used: 1
   429 ;; Hardware stack levels required when called: 1
   430 ;; This function calls:
   431 ;;		___bmul
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437     0689                     _graf:	
   438                           ;psect for function _graf
   439                           
   440     0689                     l646:	
   441                           ;incstack = 0
   442                           ; Regs used in _graf: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   443                           
   444                           
   445                           ;main.c: 43:   for(k = 0; k < 5; k++){
   446     0689  1283               	bcf	3,5	;RP0=0, select bank0
   447     068A  1303               	bcf	3,6	;RP1=0, select bank0
   448     068B  01EB               	clrf	_k	;volatile
   449     068C  01EC               	clrf	_k+1	;volatile
   450     068D                     l648:
   451     068D  3000               	movlw	0
   452     068E  026C               	subwf	_k+1,w	;volatile
   453     068F  3005               	movlw	5
   454     0690  1903               	skipnz
   455     0691  026B               	subwf	_k,w	;volatile
   456     0692  1C03               	skipc
   457     0693  2E95               	goto	u211
   458     0694  2E96               	goto	u210
   459     0695                     u211:
   460     0695  2E97               	goto	l652
   461     0696                     u210:
   462     0696  2FEA               	goto	l32
   463     0697                     l652:
   464                           
   465                           ;main.c: 44:     for(i = 0; i < 5; i++){
   466     0697  01E9               	clrf	_i	;volatile
   467     0698  01EA               	clrf	_i+1	;volatile
   468     0699                     l654:
   469     0699  3000               	movlw	0
   470     069A  026A               	subwf	_i+1,w	;volatile
   471     069B  3005               	movlw	5
   472     069C  1903               	skipnz
   473     069D  0269               	subwf	_i,w	;volatile
   474     069E  1C03               	skipc
   475     069F  2EA1               	goto	u221
   476     06A0  2EA2               	goto	u220
   477     06A1                     u221:
   478     06A1  2EA3               	goto	l658
   479     06A2                     u220:
   480     06A2  2FDB               	goto	l678
   481     06A3                     l658:
   482                           
   483                           ;main.c: 45:       for(j = 0; j < 5; j++){
   484     06A3  01E7               	clrf	_j	;volatile
   485     06A4  01E8               	clrf	_j+1	;volatile
   486     06A5                     l660:
   487     06A5  3000               	movlw	0
   488     06A6  0268               	subwf	_j+1,w	;volatile
   489     06A7  3005               	movlw	5
   490     06A8  1903               	skipnz
   491     06A9  0267               	subwf	_j,w	;volatile
   492     06AA  1C03               	skipc
   493     06AB  2EAD               	goto	u231
   494     06AC  2EAE               	goto	u230
   495     06AD                     u231:
   496     06AD  2EAF               	goto	l664
   497     06AE                     u230:
   498     06AE  2FCC               	goto	l676
   499     06AF                     l664:
   500                           
   501                           ;main.c: 46:         if(d[i][k] != 255 && d[k][j] != 255 && d[i][k] + d[k][j] < d[i][j])
      +                          {
   502     06AF  086B               	movf	_k,w	;volatile
   503     06B0  00D5               	movwf	??_graf
   504     06B1  3001               	movlw	1
   505     06B2                     u245:
   506     06B2  1003               	clrc
   507     06B3  0DD5               	rlf	??_graf,f
   508     06B4  3EFF               	addlw	-1
   509     06B5  1D03               	skipz
   510     06B6  2EB2               	goto	u245
   511     06B7  3020               	movlw	(low (_d| 0))& (0+255)
   512     06B8  0755               	addwf	??_graf,w
   513     06B9  00D6               	movwf	??_graf+1
   514     06BA  300A               	movlw	10
   515     06BB  00D2               	movwf	___bmul@multiplicand
   516     06BC  0869               	movf	_i,w	;volatile
   517     06BD  118A  2642  118A   	fcall	___bmul
   518     06C0  1283               	bcf	3,5	;RP0=0, select bank0
   519     06C1  1303               	bcf	3,6	;RP1=0, select bank0
   520     06C2  0756               	addwf	??_graf+1,w
   521     06C3  00D7               	movwf	??_graf+2
   522     06C4  0857               	movf	??_graf+2,w
   523     06C5  0084               	movwf	4
   524     06C6  1383               	bcf	3,7	;select IRP bank0
   525     06C7  0800               	movf	0,w
   526     06C8  00D8               	movwf	??_graf+3
   527     06C9  0A84               	incf	4,f
   528     06CA  0800               	movf	0,w
   529     06CB  00D9               	movwf	??_graf+4
   530     06CC  0A58               	incf	??_graf+3,w
   531     06CD  0459               	iorwf	??_graf+4,w
   532     06CE  1903               	btfsc	3,2
   533     06CF  2ED1               	goto	u251
   534     06D0  2ED2               	goto	u250
   535     06D1                     u251:
   536     06D1  2FC3               	goto	l672
   537     06D2                     u250:
   538     06D2                     l666:
   539     06D2  0867               	movf	_j,w	;volatile
   540     06D3  00D5               	movwf	??_graf
   541     06D4  3001               	movlw	1
   542     06D5                     u265:
   543     06D5  1003               	clrc
   544     06D6  0DD5               	rlf	??_graf,f
   545     06D7  3EFF               	addlw	-1
   546     06D8  1D03               	skipz
   547     06D9  2ED5               	goto	u265
   548     06DA  3020               	movlw	(low (_d| 0))& (0+255)
   549     06DB  0755               	addwf	??_graf,w
   550     06DC  00D6               	movwf	??_graf+1
   551     06DD  300A               	movlw	10
   552     06DE  00D2               	movwf	___bmul@multiplicand
   553     06DF  086B               	movf	_k,w	;volatile
   554     06E0  118A  2642  118A   	fcall	___bmul
   555     06E3  1283               	bcf	3,5	;RP0=0, select bank0
   556     06E4  1303               	bcf	3,6	;RP1=0, select bank0
   557     06E5  0756               	addwf	??_graf+1,w
   558     06E6  00D7               	movwf	??_graf+2
   559     06E7  0857               	movf	??_graf+2,w
   560     06E8  0084               	movwf	4
   561     06E9  1383               	bcf	3,7	;select IRP bank0
   562     06EA  0800               	movf	0,w
   563     06EB  00D8               	movwf	??_graf+3
   564     06EC  0A84               	incf	4,f
   565     06ED  0800               	movf	0,w
   566     06EE  00D9               	movwf	??_graf+4
   567     06EF  0A58               	incf	??_graf+3,w
   568     06F0  0459               	iorwf	??_graf+4,w
   569     06F1  1903               	btfsc	3,2
   570     06F2  2EF4               	goto	u271
   571     06F3  2EF5               	goto	u270
   572     06F4                     u271:
   573     06F4  2FC3               	goto	l672
   574     06F5                     u270:
   575     06F5                     l668:
   576     06F5  0867               	movf	_j,w	;volatile
   577     06F6  00D5               	movwf	??_graf
   578     06F7  3001               	movlw	1
   579     06F8                     u285:
   580     06F8  1003               	clrc
   581     06F9  0DD5               	rlf	??_graf,f
   582     06FA  3EFF               	addlw	-1
   583     06FB  1D03               	skipz
   584     06FC  2EF8               	goto	u285
   585     06FD  3020               	movlw	(low (_d| 0))& (0+255)
   586     06FE  0755               	addwf	??_graf,w
   587     06FF  00D6               	movwf	??_graf+1
   588     0700  300A               	movlw	10
   589     0701  00D2               	movwf	___bmul@multiplicand
   590     0702  0869               	movf	_i,w	;volatile
   591     0703  118A  2642  118A   	fcall	___bmul
   592     0706  1283               	bcf	3,5	;RP0=0, select bank0
   593     0707  1303               	bcf	3,6	;RP1=0, select bank0
   594     0708  0756               	addwf	??_graf+1,w
   595     0709  00D7               	movwf	??_graf+2
   596     070A  0857               	movf	??_graf+2,w
   597     070B  0084               	movwf	4
   598     070C  1383               	bcf	3,7	;select IRP bank0
   599     070D  0800               	movf	0,w
   600     070E  00D8               	movwf	??_graf+3
   601     070F  0A84               	incf	4,f
   602     0710  0800               	movf	0,w
   603     0711  00D9               	movwf	??_graf+4
   604     0712  0867               	movf	_j,w	;volatile
   605     0713  00DA               	movwf	??_graf+5
   606     0714  3001               	movlw	1
   607     0715                     u295:
   608     0715  1003               	clrc
   609     0716  0DDA               	rlf	??_graf+5,f
   610     0717  3EFF               	addlw	-1
   611     0718  1D03               	skipz
   612     0719  2F15               	goto	u295
   613     071A  3020               	movlw	(low (_d| 0))& (0+255)
   614     071B  075A               	addwf	??_graf+5,w
   615     071C  00DB               	movwf	??_graf+6
   616     071D  300A               	movlw	10
   617     071E  00D2               	movwf	___bmul@multiplicand
   618     071F  086B               	movf	_k,w	;volatile
   619     0720  118A  2642  118A   	fcall	___bmul
   620     0723  1283               	bcf	3,5	;RP0=0, select bank0
   621     0724  1303               	bcf	3,6	;RP1=0, select bank0
   622     0725  075B               	addwf	??_graf+6,w
   623     0726  00DC               	movwf	??_graf+7
   624     0727  085C               	movf	??_graf+7,w
   625     0728  0084               	movwf	4
   626     0729  1383               	bcf	3,7	;select IRP bank0
   627     072A  0800               	movf	0,w
   628     072B  00DD               	movwf	??_graf+8
   629     072C  0A84               	incf	4,f
   630     072D  0800               	movf	0,w
   631     072E  00DE               	movwf	??_graf+9
   632     072F  086B               	movf	_k,w	;volatile
   633     0730  00DF               	movwf	??_graf+10
   634     0731  3001               	movlw	1
   635     0732                     u305:
   636     0732  1003               	clrc
   637     0733  0DDF               	rlf	??_graf+10,f
   638     0734  3EFF               	addlw	-1
   639     0735  1D03               	skipz
   640     0736  2F32               	goto	u305
   641     0737  3020               	movlw	(low (_d| 0))& (0+255)
   642     0738  075F               	addwf	??_graf+10,w
   643     0739  00E0               	movwf	??_graf+11
   644     073A  300A               	movlw	10
   645     073B  00D2               	movwf	___bmul@multiplicand
   646     073C  0869               	movf	_i,w	;volatile
   647     073D  118A  2642  118A   	fcall	___bmul
   648     0740  1283               	bcf	3,5	;RP0=0, select bank0
   649     0741  1303               	bcf	3,6	;RP1=0, select bank0
   650     0742  0760               	addwf	??_graf+11,w
   651     0743  00E1               	movwf	??_graf+12
   652     0744  0861               	movf	??_graf+12,w
   653     0745  0084               	movwf	4
   654     0746  1383               	bcf	3,7	;select IRP bank0
   655     0747  0800               	movf	0,w
   656     0748  00E2               	movwf	??_graf+13
   657     0749  0A84               	incf	4,f
   658     074A  0800               	movf	0,w
   659     074B  00E3               	movwf	??_graf+14
   660     074C  085D               	movf	??_graf+8,w
   661     074D  0762               	addwf	??_graf+13,w
   662     074E  00E4               	movwf	??_graf+15
   663     074F  085E               	movf	??_graf+9,w
   664     0750  1803               	skipnc
   665     0751  0A5E               	incf	??_graf+9,w
   666     0752  0763               	addwf	??_graf+14,w
   667     0753  00E5               	movwf	??_graf+16
   668     0754  0865               	movf	??_graf+16,w
   669     0755  3A80               	xorlw	128
   670     0756  00E6               	movwf	??_graf+17
   671     0757  0859               	movf	??_graf+4,w
   672     0758  3A80               	xorlw	128
   673     0759  0266               	subwf	??_graf+17,w
   674     075A  1D03               	skipz
   675     075B  2F5E               	goto	u315
   676     075C  0858               	movf	??_graf+3,w
   677     075D  0264               	subwf	??_graf+15,w
   678     075E                     u315:
   679     075E  1803               	skipnc
   680     075F  2F61               	goto	u311
   681     0760  2F62               	goto	u310
   682     0761                     u311:
   683     0761  2FC3               	goto	l672
   684     0762                     u310:
   685     0762                     l670:
   686                           
   687                           ;main.c: 47:             d[i][j] = d[i][k] + d[k][j];
   688     0762  1283               	bcf	3,5	;RP0=0, select bank0
   689     0763  1303               	bcf	3,6	;RP1=0, select bank0
   690     0764  0867               	movf	_j,w	;volatile
   691     0765  00D5               	movwf	??_graf
   692     0766  3001               	movlw	1
   693     0767                     u325:
   694     0767  1003               	clrc
   695     0768  0DD5               	rlf	??_graf,f
   696     0769  3EFF               	addlw	-1
   697     076A  1D03               	skipz
   698     076B  2F67               	goto	u325
   699     076C  3020               	movlw	(low (_d| 0))& (0+255)
   700     076D  0755               	addwf	??_graf,w
   701     076E  00D6               	movwf	??_graf+1
   702     076F  300A               	movlw	10
   703     0770  00D2               	movwf	___bmul@multiplicand
   704     0771  086B               	movf	_k,w	;volatile
   705     0772  118A  2642  118A   	fcall	___bmul
   706     0775  1283               	bcf	3,5	;RP0=0, select bank0
   707     0776  1303               	bcf	3,6	;RP1=0, select bank0
   708     0777  0756               	addwf	??_graf+1,w
   709     0778  00D7               	movwf	??_graf+2
   710     0779  0857               	movf	??_graf+2,w
   711     077A  0084               	movwf	4
   712     077B  1383               	bcf	3,7	;select IRP bank0
   713     077C  0800               	movf	0,w
   714     077D  00D8               	movwf	??_graf+3
   715     077E  0A84               	incf	4,f
   716     077F  0800               	movf	0,w
   717     0780  00D9               	movwf	??_graf+4
   718     0781  086B               	movf	_k,w	;volatile
   719     0782  00DA               	movwf	??_graf+5
   720     0783  3001               	movlw	1
   721     0784                     u335:
   722     0784  1003               	clrc
   723     0785  0DDA               	rlf	??_graf+5,f
   724     0786  3EFF               	addlw	-1
   725     0787  1D03               	skipz
   726     0788  2F84               	goto	u335
   727     0789  3020               	movlw	(low (_d| 0))& (0+255)
   728     078A  075A               	addwf	??_graf+5,w
   729     078B  00DB               	movwf	??_graf+6
   730     078C  300A               	movlw	10
   731     078D  00D2               	movwf	___bmul@multiplicand
   732     078E  0869               	movf	_i,w	;volatile
   733     078F  118A  2642  118A   	fcall	___bmul
   734     0792  1283               	bcf	3,5	;RP0=0, select bank0
   735     0793  1303               	bcf	3,6	;RP1=0, select bank0
   736     0794  075B               	addwf	??_graf+6,w
   737     0795  00DC               	movwf	??_graf+7
   738     0796  085C               	movf	??_graf+7,w
   739     0797  0084               	movwf	4
   740     0798  1383               	bcf	3,7	;select IRP bank0
   741     0799  0800               	movf	0,w
   742     079A  00DD               	movwf	??_graf+8
   743     079B  0A84               	incf	4,f
   744     079C  0800               	movf	0,w
   745     079D  00DE               	movwf	??_graf+9
   746     079E  0858               	movf	??_graf+3,w
   747     079F  075D               	addwf	??_graf+8,w
   748     07A0  00DF               	movwf	??_graf+10
   749     07A1  0859               	movf	??_graf+4,w
   750     07A2  1803               	skipnc
   751     07A3  0A59               	incf	??_graf+4,w
   752     07A4  075E               	addwf	??_graf+9,w
   753     07A5  00E0               	movwf	??_graf+11
   754     07A6  0867               	movf	_j,w	;volatile
   755     07A7  00E1               	movwf	??_graf+12
   756     07A8  3001               	movlw	1
   757     07A9                     u345:
   758     07A9  1003               	clrc
   759     07AA  0DE1               	rlf	??_graf+12,f
   760     07AB  3EFF               	addlw	-1
   761     07AC  1D03               	skipz
   762     07AD  2FA9               	goto	u345
   763     07AE  3020               	movlw	(low (_d| 0))& (0+255)
   764     07AF  0761               	addwf	??_graf+12,w
   765     07B0  00E2               	movwf	??_graf+13
   766     07B1  300A               	movlw	10
   767     07B2  00D2               	movwf	___bmul@multiplicand
   768     07B3  0869               	movf	_i,w	;volatile
   769     07B4  118A  2642  118A   	fcall	___bmul
   770     07B7  1283               	bcf	3,5	;RP0=0, select bank0
   771     07B8  1303               	bcf	3,6	;RP1=0, select bank0
   772     07B9  0762               	addwf	??_graf+13,w
   773     07BA  00E3               	movwf	??_graf+14
   774     07BB  0863               	movf	??_graf+14,w
   775     07BC  0084               	movwf	4
   776     07BD  085F               	movf	??_graf+10,w
   777     07BE  1383               	bcf	3,7	;select IRP bank0
   778     07BF  0080               	movwf	0
   779     07C0  0A84               	incf	4,f
   780     07C1  0860               	movf	??_graf+11,w
   781     07C2  0080               	movwf	0
   782     07C3                     l672:
   783                           
   784                           ;main.c: 49:       }
   785     07C3  3001               	movlw	1
   786     07C4  1283               	bcf	3,5	;RP0=0, select bank0
   787     07C5  1303               	bcf	3,6	;RP1=0, select bank0
   788     07C6  07E7               	addwf	_j,f	;volatile
   789     07C7  1803               	skipnc
   790     07C8  0AE8               	incf	_j+1,f	;volatile
   791     07C9  3000               	movlw	0
   792     07CA  07E8               	addwf	_j+1,f	;volatile
   793     07CB  2EA5               	goto	l660
   794     07CC                     l676:
   795                           
   796                           ;main.c: 50:     }
   797     07CC  3001               	movlw	1
   798     07CD  07E9               	addwf	_i,f	;volatile
   799     07CE  1803               	skipnc
   800     07CF  0AEA               	incf	_i+1,f	;volatile
   801     07D0  3000               	movlw	0
   802     07D1  07EA               	addwf	_i+1,f	;volatile
   803     07D2  3000               	movlw	0
   804     07D3  026A               	subwf	_i+1,w	;volatile
   805     07D4  3005               	movlw	5
   806     07D5  1903               	skipnz
   807     07D6  0269               	subwf	_i,w	;volatile
   808     07D7  1C03               	skipc
   809     07D8  2FDA               	goto	u351
   810     07D9  2FDB               	goto	u350
   811     07DA                     u351:
   812     07DA  2EA3               	goto	l658
   813     07DB                     u350:
   814     07DB                     l678:
   815                           
   816                           ;main.c: 51:   }
   817     07DB  3001               	movlw	1
   818     07DC  07EB               	addwf	_k,f	;volatile
   819     07DD  1803               	skipnc
   820     07DE  0AEC               	incf	_k+1,f	;volatile
   821     07DF  3000               	movlw	0
   822     07E0  07EC               	addwf	_k+1,f	;volatile
   823     07E1  3000               	movlw	0
   824     07E2  026C               	subwf	_k+1,w	;volatile
   825     07E3  3005               	movlw	5
   826     07E4  1903               	skipnz
   827     07E5  026B               	subwf	_k,w	;volatile
   828     07E6  1C03               	skipc
   829     07E7  2FE9               	goto	u361
   830     07E8  2FEA               	goto	u360
   831     07E9                     u361:
   832     07E9  2E97               	goto	l652
   833     07EA                     u360:
   834     07EA                     l32:
   835     07EA  0008               	return
   836     07EB                     __end_of_graf:
   837                           
   838                           	psect	text2
   839     0642                     __ptext2:	
   840 ;; *************** function ___bmul *****************
   841 ;; Defined at:
   842 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul8.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;  multiplier      1    wreg     unsigned char 
   845 ;;  multiplicand    1    0[BANK0 ] unsigned char 
   846 ;; Auto vars:     Size  Location     Type
   847 ;;  multiplier      1    2[BANK0 ] unsigned char 
   848 ;;  product         1    1[BANK0 ] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      unsigned char 
   851 ;; Registers used:
   852 ;;		wreg, status,2, status,0
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1
   858 ;;      Params:         0       1       0
   859 ;;      Locals:         0       2       0
   860 ;;      Temps:          0       0       0
   861 ;;      Totals:         0       3       0
   862 ;;Total ram usage:        3 bytes
   863 ;; Hardware stack levels used: 1
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_graf
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871     0642                     ___bmul:	
   872                           ;psect for function ___bmul
   873                           
   874                           
   875                           ;incstack = 0
   876                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   877                           ;___bmul@multiplier stored from wreg
   878     0642  1283               	bcf	3,5	;RP0=0, select bank0
   879     0643  1303               	bcf	3,6	;RP1=0, select bank0
   880     0644  00D4               	movwf	___bmul@multiplier
   881     0645                     l632:
   882     0645  01D3               	clrf	___bmul@product
   883     0646                     l634:
   884     0646  1C54               	btfss	___bmul@multiplier,0
   885     0647  2E49               	goto	u191
   886     0648  2E4A               	goto	u190
   887     0649                     u191:
   888     0649  2E4C               	goto	l638
   889     064A                     u190:
   890     064A                     l636:
   891     064A  0852               	movf	___bmul@multiplicand,w
   892     064B  07D3               	addwf	___bmul@product,f
   893     064C                     l638:
   894     064C  1003               	clrc
   895     064D  0DD2               	rlf	___bmul@multiplicand,f
   896     064E                     l640:
   897     064E  1003               	clrc
   898     064F  0CD4               	rrf	___bmul@multiplier,f
   899     0650  0854               	movf	___bmul@multiplier,w
   900     0651  1D03               	btfss	3,2
   901     0652  2E54               	goto	u201
   902     0653  2E55               	goto	u200
   903     0654                     u201:
   904     0654  2E46               	goto	l634
   905     0655                     u200:
   906     0655                     l642:
   907     0655  0853               	movf	___bmul@product,w
   908     0656                     l144:
   909     0656  0008               	return
   910     0657                     __end_of___bmul:
   911     0001                     ___latbits      equ	1
   912     007E                     btemp           set	126	;btemp
   913     007E                     wtemp0          set	126
   914                           
   915                           	psect	config
   916                           
   917                           ;Config register CONFIG @ 0x2007
   918                           ;	Oscillator Selection bits
   919                           ;	FOSC = HS, HS oscillator
   920                           ;	Watchdog Timer Enable bit
   921                           ;	WDTE = OFF, WDT disabled
   922                           ;	Power-up Timer Enable bit
   923                           ;	PWRTE = OFF, PWRT disabled
   924                           ;	FLASH Program Memory Code Protection bits
   925                           ;	CP = OFF, Code protection off
   926                           ;	Brown-out Reset Enable bit
   927                           ;	BOREN = ON, BOR enabled
   928                           ;	Low Voltage In-Circuit Serial Programming Enable bit
   929                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   930                           ;	Data EE Memory Code Protection
   931                           ;	CPD = OFF, Code Protection off
   932                           ;	FLASH Program Memory Write Enable
   933                           ;	WRT = OFF, Unprotected program memory may not be written to by EECON control
   934                           ;	In-Circuit Debugger Mode bit
   935                           ;	DEBUG = 0x1, unprogrammed default
   936     2007                     	org	8199
   937     2007  3D7A               	dw	15738

Data Sizes:
    Strings     0
    Constant    0
    Data        50
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            94     21      77
    BANK1            94      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_graf
    _graf->___bmul

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     115
                               _graf
 ---------------------------------------------------------------------------------
 (1) _graf                                                18    18      0     115
                                              3 BANK0     18    18      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               3     2      1     115
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _graf
     ___bmul

Address spaces:
Name               Size   Autos  Total    Usage
BANK1               94      0       0      0.0%
BITBANK1            94      0       0      0.0%
BANK0               94     21      77     81.9%
BITBANK0            94      0       0      0.0%
COMMON               0      0       0      0.0%
BITCOMMON            0      0       0      0.0%
DATA                 0      0      77      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Wed Feb 19 19:59:46 2025

                      _d 0020                        _i 0069                        _j 0067  
                      _k 006B                        pc 0002           ___bmul@product 0053  
                     l32 07EA                       fsr 0004                      l144 0656  
                    l640 064E                      l632 0645                      l642 0655  
                    l634 0646                      l636 064A                      l660 06A5  
                    l652 0697                      l638 064C                      l670 0762  
                    l654 0699                      l646 0689                      l672 07C3  
                    l664 06AF                      l648 068D                      l680 062F  
                    l666 06D2                      l658 06A3                      l682 0632  
                    l668 06F5                      l676 07CC                      l684 0636  
                    l678 07DB                      l686 0639                      u200 0655  
                    u201 0654                      u210 0696                      u211 0695  
                    u220 06A2                      u221 06A1                      u310 0762  
                    u230 06AE                      u311 0761                      u231 06AD  
                    u305 0732                      u250 06D2                      u315 075E  
                    u251 06D1                      u325 0767                      u245 06B2  
                    u190 064A                      u350 07DB                      u270 06F5  
                    u191 0649                      u351 07DA                      u335 0784  
                    u271 06F4                      u360 07EA                      u361 07E9  
                    u345 07A9                      u265 06D5                      u285 06F8  
                    u295 0715                      fsr0 0004                      indf 0000  
                   _graf 0689                     _main 062F                     btemp 007E  
                   start 0000        ___bmul@multiplier 0054                    ?_graf 0052  
                  ?_main 0052                    _PORTA 0005                    _TRISA 0085  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07EB             __end_of_graf 07EB             __end_of_main 0642  
                 ??_graf 0055                   ??_main 0000                   ___bmul 0642  
__end_of__initialization 07FD      ___bmul@multiplicand 0052           __pcstackCOMMON 0000  
           __pidataBANK0 0657               __pbssBANK0 0067               __pmaintext 062F  
                ?___bmul 0052                  __ptext1 0689                  __ptext2 0642  
   end_of_initialization 07FD           __end_of___bmul 0657      start_initialization 07EB  
               ??___bmul 0000               init_fetch0 061E              __pdataBANK0 0020  
              ___latbits 0001            __pcstackBANK0 0052                 init_ram0 0622  
